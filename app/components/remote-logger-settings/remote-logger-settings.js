/**
 * Copyright (C) 2020 to the present, Crestron Electronics, Inc.
 * All rights reserved.
 * No part of this software may be reproduced in any form, machine
 * or natural, without the express written consent of Crestron Electronics.
 * Use of this source code is subject to the terms of the Crestron Software License Agreement 
 * under which you licensed this source code.  
 *
 * This code was automatically generated by Crestron's code generation tool.
*/

var remoteLoggerSettingsModule = (function () {
    'use strict';

    var logger = {};
    var appender = {};
    var clickCount = 0;
    var startTimer = 0;

    /**
     * Set the remote logger configuration for docker
     */
    function setRemoteLoggerConfig(hostName, portNumber) {
        try {
            if (!!hostName) {
                appender = CrComLib.getRemoteAppender(hostName, portNumber);
                logger = CrComLib.getLogger(appender, true);
            }
        } catch (error) {
            utils.log(error);
        }
    }

    /**
     * Counts the clicks happened in the time difference
     */
    function clickCounter() {
        if (startTimer) {
            if (timeDifference() > 3) {
                reSetTimer();
            }
        }
        clickCount += 1;
        if (clickCount == 1) {
            startTimer = Date.now();
        }
    }

    /**
     * Reset the time
     */
    function reSetTimer() {
        clickCount = 0;
        startTimer = 0;
    }

    /**
     * Calculate the Ttime difference
     */
    function timeDifference() {
        var endTimer = Date.now();
        var timerDiff = Math.floor((endTimer - startTimer) / 1000);
        return timerDiff;
    }

    /**
     * Displays the logger popup
     */
    function showLoggerPopUp() {
        var model = document.getElementById("loggerModalWrapper");
        var errorMessage = document.querySelector(".ui.error.message");
        errorMessage.style.display = 'none';
        clickCounter();
        if (clickCount === 5) {
            if (timeDifference() <= 3) {
                model.style.display = "block";
                reSetTimer();
            } else {
                model.style.display = "none";
                reSetTimer();
            }
        }
    }

    /**
     * Closes the logger popup
     */
    function closePopUp() {
        document.getElementById("loggerModalWrapper").style.display = "none";
    }

    /**
     * Retreive the inputs from the form and passes to the setRemoteLoggerConfig()
     */
    function updateLoggerInfo() {
        var hostName = document.getElementById("loggerIpAddress").value;
        var portNumber = document.getElementById("loggerPortNumber").value;
        closePopUp();
        setRemoteLoggerConfig(hostName, portNumber);
    }

    /**
     * Validate the IP Address / Hostname and Port number provided in the form
     */
    function validate() {
        var errorMessage = document.querySelector(".ui.error.message");
        var ipAddress = document.getElementById('loggerIpAddress');
        var portNumber = document.getElementById('loggerPortNumber');
        var ipExp =
            /^(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))\.(\d|[1-9]\d|1\d\d|2([0-4]\d|5[0-5]))$/;
        var hostExp =
            /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$/;
        errorMessage.style.display = 'none';
        var ip = false;
        var hostname = false;
        var port = false;
        var time = false;
        var i = 0;
        errorMessage.innerHTML = '';
        if (ipAddress.value === '' || ipAddress.value === undefined || ipAddress.value === null) {
            errorMessage.innerHTML = "Please enter IP Address/Hostname";
            errorMessage.style.display = 'block';
            return false;
        }
        if (portNumber.value === '' || portNumber.value === undefined || portNumber.value ===
            null) {
            errorMessage.innerHTML = "Please enter Port Number";
            errorMessage.style.display = 'block';
            return false;
        }
        if (ipAddress.value !== undefined && ipAddress.value !== null && ipAddress.value !== "0.0.0.0" && ipAddress.value !==
            "255.255.255.255" && ipExp.test(ipAddress.value) && ipAddress.value.length <= 127 && hostExp.test(ipAddress.value) &&
            ipAddress.value.length <= 127) {
            ip = true;
            errorMessage.style.display = 'none';
        } else {
            errorMessage.innerHTML = "Please enter valid IP Address/Hostname";
            errorMessage.style.display = 'block';
            return false;
        }
        if (portNumber.value !== null && (!isNaN(portNumber.value) && (portNumber.value >= 1025 &&
                portNumber.value < 65536))) {
            port = true;
            errorMessage.style.display = 'none';
        } else {
            errorMessage.innerHTML = "Please enter valid Port Number";
            errorMessage.style.display = 'block';
            return false;
        }
        if ((ip || hostname) && port) {
            errorMessage.style.display = 'none';
            updateLoggerInfo();
        }
    }

    /**
     * Initialize Method
     */
    function onInit() {

    }

    /**
     * All public or private methods which need to call onInit
     */
    // Once the component is added to the view, then the below lines can be uncommented.
    let remoteLoggerSettingsPage = document.querySelector('#remote-logger-settings-page');
    remoteLoggerSettingsPage.addEventListener('afterLoad', onInit);

    /**
     * All public method and properties are exported here
     */
    return {
        showLoggerPopUp: showLoggerPopUp,
        validate: validate,
        closePopUp: closePopUp,
        updateLoggerInfo: updateLoggerInfo,
        setRemoteLoggerConfig: setRemoteLoggerConfig
    };

}());